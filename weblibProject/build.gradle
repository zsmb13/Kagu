buildscript {
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.moowork.gradle:gradle-node-plugin:1.2.0'
    }
}

apply plugin: 'kotlin2js'
apply plugin: 'com.moowork.node'

dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile "co.zsmb:koinjs:0.1.0"
    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
}


def outDir = "$buildDir/kotlin2js/main"

compileTestKotlin2Js {
    kotlinOptions {
        outputFile = "$buildDir/kotlin2js/test/weblib_test.js"
    }
}

compileKotlin2Js {
    kotlinOptions {
        outputFile = "$outDir/weblib.js"
        sourceMap = true
    }
}

def rootPackage = "co.zsmb.weblib"
def rootPckg = rootPackage.replace('.', '/')


// Local deployment vars
def weblib_version = "0.0.1"
def moduleName = "weblibProject"
def localRepo = project.hasProperty('localRepository') ? localRepository : '.'
def targetDir = "$localRepo/$rootPckg/$weblib_version"


// Sources
task jarSources(type: Jar) {
    from(sourceSets.main.allSource) {
        include "**/*.kt"
    }
    classifier = 'source'
}

jarSources {
    if (!devMode.toBoolean()) {
        doLast {
            new File(targetDir).mkdirs()
            copy {
                from "$buildDir/libs/${moduleName}-source.jar"
                into targetDir
                rename "${moduleName}-source.jar", "weblib-${weblib_version}-sources.jar"
            }
        }
    }
}

artifacts {
    archives jarSources
}


// Library
jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    manifest {
        attributes(
                "Specification-Title": "Kagu web framework",
                "Kotlin-JS-Module-Name": "Kagu"
        )
    }

    if (!devMode.toBoolean()) {
        doLast {
            new File(targetDir).mkdirs()

            copy {
                from "$buildDir/libs/${moduleName}.jar"
                into targetDir
                rename "${moduleName}.jar", "weblib-${weblib_version}.jar"
            }
        }
    }
}


// Testing
[compileKotlin2Js, compileTestKotlin2Js]*.configure {
    kotlinOptions.moduleKind = "commonjs"
}

task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
    from compileKotlin2Js.destinationDir

    configurations.testCompile.each {
        from zipTree(it.absolutePath).matching { include '*.js' }
    }

    into "${buildDir}/node_modules"
}

node {
    download = true
}

task installMocha(type: NpmTask) {
    args = ['install', 'mocha']
}

task runMocha(type: NodeTask, dependsOn: [compileTestKotlin2Js, populateNodeModules, installMocha]) {
    if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {
        script = file('node_modules/mocha/bin/mocha')
    } else {
        script = file('node_modules/.bin/mocha')
    }
    args = [compileTestKotlin2Js.outputFile]
}

test.dependsOn runMocha
